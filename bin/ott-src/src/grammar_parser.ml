type token =
  | STRING of (string*string)
  | BLANKS of (string)
  | LINE of (string*string)
  | LINELINE of (string*string*string)
  | BLANKLINE of (string)
  | COMMENTLINE of (string)
  | INTERSTITIAL of (string)
  | EOF
  | COMMA
  | CCE
  | BAR
  | DOUBLELEFTBRACKET
  | DOUBLERIGHTBRACKET
  | DOUBLELEFTBRACE
  | DOUBLERIGHTBRACE
  | COLONCOLON
  | LTCOLONCOLON
  | UNDERSCORECOLONCOLON
  | DOTDOT
  | DOTDOTDOT
  | DOTDOTDOTDOT
  | EMBED
  | METAVAR
  | INDEXVAR
  | RULES
  | SUBRULES
  | CONTEXTRULES
  | SUBSTITUTIONS
  | FREEVARS
  | DEFNCLASS
  | DEFN
  | FUNDEFNCLASS
  | FUNDEFN
  | DEFNCOM
  | BY
  | SINGLE
  | MULTIPLE
  | HOMS
  | PARSING
  | LTEQ
  | LEFT
  | RIGHT
  | NON
  | BIND_LEFT_DELIM
  | BIND_RIGHT_DELIM
  | BIND
  | IN
  | EQ
  | HASH
  | NAMES
  | DISTINCTNAMES
  | LPAREN
  | RPAREN
  | UNION
  | EMPTY
  | COQSECTIONBEGIN
  | COQSECTIONEND
  | COQVARIABLE
  | COMP_LEFT
  | COMP_MIDDLE
  | COMP_RIGHT
  | COMP_IN

open Parsing;;
let _ = parse_error;;
# 37 "grammar_parser.mly"
open Location
open Types
open Auxl

let mkl () = 
   [ { Location.loc_start = symbol_start_pos ();  
       Location.loc_end = symbol_end_pos () } ]

let mkp () = 
   symbol_start_pos ()

(* let mkl x =  *)
(*   let l = {Location.loc_start=symbol_start_pos ();  *)
(* 	   Location.loc_end=symbol_end_pos ()} in *)
(*   (\* print_string (Location.pp_t l) ; flush stdout; *\)  *)
(*   {desc=x; loc=l} *)
    
let parse_error s = 
  raise (My_parse_error ("Parse error: " ^ s ^ " " 
	   ^ Location.pp_position2 (Parsing.symbol_end_pos () )))

(* %token EQUAL             *)
# 91 "grammar_parser.ml"
let yytransl_const = [|
    0 (* EOF *);
  264 (* COMMA *);
  265 (* CCE *);
  266 (* BAR *);
  267 (* DOUBLELEFTBRACKET *);
  268 (* DOUBLERIGHTBRACKET *);
  269 (* DOUBLELEFTBRACE *);
  270 (* DOUBLERIGHTBRACE *);
  271 (* COLONCOLON *);
  272 (* LTCOLONCOLON *);
  273 (* UNDERSCORECOLONCOLON *);
  274 (* DOTDOT *);
  275 (* DOTDOTDOT *);
  276 (* DOTDOTDOTDOT *);
  277 (* EMBED *);
  278 (* METAVAR *);
  279 (* INDEXVAR *);
  280 (* RULES *);
  281 (* SUBRULES *);
  282 (* CONTEXTRULES *);
  283 (* SUBSTITUTIONS *);
  284 (* FREEVARS *);
  285 (* DEFNCLASS *);
  286 (* DEFN *);
  287 (* FUNDEFNCLASS *);
  288 (* FUNDEFN *);
  289 (* DEFNCOM *);
  290 (* BY *);
  291 (* SINGLE *);
  292 (* MULTIPLE *);
  293 (* HOMS *);
  294 (* PARSING *);
  295 (* LTEQ *);
  296 (* LEFT *);
  297 (* RIGHT *);
  298 (* NON *);
  299 (* BIND_LEFT_DELIM *);
  300 (* BIND_RIGHT_DELIM *);
  301 (* BIND *);
  302 (* IN *);
  303 (* EQ *);
  304 (* HASH *);
  305 (* NAMES *);
  306 (* DISTINCTNAMES *);
  307 (* LPAREN *);
  308 (* RPAREN *);
  309 (* UNION *);
  310 (* EMPTY *);
  311 (* COQSECTIONBEGIN *);
  312 (* COQSECTIONEND *);
  313 (* COQVARIABLE *);
  314 (* COMP_LEFT *);
  315 (* COMP_MIDDLE *);
  316 (* COMP_RIGHT *);
  317 (* COMP_IN *);
    0|]

let yytransl_block = [|
  257 (* STRING *);
  258 (* BLANKS *);
  259 (* LINE *);
  260 (* LINELINE *);
  261 (* BLANKLINE *);
  262 (* COMMENTLINE *);
  263 (* INTERSTITIAL *);
    0|]

let yylhs = "\255\255\
\001\000\005\000\005\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\007\000\007\000\021\000\022\000\024\000\025\000\025\000\
\026\000\027\000\027\000\028\000\028\000\029\000\029\000\029\000\
\029\000\029\000\029\000\030\000\030\000\030\000\035\000\035\000\
\036\000\004\000\004\000\037\000\037\000\037\000\037\000\037\000\
\037\000\038\000\038\000\038\000\039\000\039\000\039\000\039\000\
\039\000\042\000\042\000\040\000\040\000\040\000\040\000\040\000\
\040\000\040\000\040\000\040\000\043\000\043\000\044\000\032\000\
\032\000\032\000\045\000\045\000\045\000\045\000\033\000\033\000\
\033\000\046\000\046\000\008\000\047\000\047\000\048\000\050\000\
\049\000\049\000\051\000\053\000\023\000\023\000\054\000\054\000\
\041\000\055\000\052\000\052\000\052\000\031\000\031\000\031\000\
\034\000\034\000\009\000\056\000\056\000\057\000\002\000\010\000\
\059\000\059\000\060\000\061\000\061\000\061\000\061\000\062\000\
\063\000\064\000\064\000\064\000\065\000\065\000\066\000\066\000\
\067\000\067\000\068\000\068\000\069\000\058\000\058\000\058\000\
\011\000\070\000\070\000\071\000\012\000\072\000\072\000\073\000\
\013\000\074\000\074\000\075\000\076\000\076\000\014\000\077\000\
\077\000\078\000\015\000\079\000\079\000\079\000\079\000\016\000\
\080\000\080\000\081\000\082\000\083\000\083\000\017\000\018\000\
\019\000\020\000\003\000\003\000\084\000\084\000\084\000\085\000\
\085\000\085\000\000\000\000\000\000\000\000\000"

let yylen = "\002\000\
\001\000\002\000\001\000\001\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\001\000\001\000\004\000\004\000\001\000\000\000\002\000\
\004\000\002\000\003\000\000\000\002\000\003\000\001\000\001\000\
\001\000\001\000\001\000\001\000\003\000\006\000\000\000\002\000\
\004\000\000\000\002\000\003\000\001\000\001\000\001\000\001\000\
\001\000\000\000\002\000\002\000\004\000\003\000\009\000\009\000\
\004\000\000\000\002\000\001\000\003\000\005\000\004\000\006\000\
\008\000\006\000\003\000\001\000\000\000\004\000\001\000\001\000\
\001\000\001\000\001\000\001\000\005\000\007\000\001\000\003\000\
\005\000\000\000\002\000\001\000\000\000\002\000\006\000\008\000\
\000\000\002\000\001\000\001\000\002\000\004\000\000\000\003\000\
\001\000\001\000\000\000\002\000\002\000\000\000\002\000\002\000\
\000\000\002\000\006\000\000\000\002\000\011\000\005\000\004\000\
\000\000\002\000\010\000\000\000\002\000\002\000\002\000\001\000\
\001\000\000\000\002\000\002\000\002\000\002\000\003\000\001\000\
\000\000\002\000\001\000\002\000\003\000\001\000\003\000\003\000\
\001\000\000\000\002\000\004\000\001\000\000\000\002\000\005\000\
\001\000\000\000\002\000\006\000\001\000\001\000\001\000\000\000\
\002\000\005\000\001\000\001\000\001\000\001\000\001\000\001\000\
\000\000\002\000\003\000\004\000\000\000\002\000\002\000\001\000\
\001\000\001\000\000\000\002\000\003\000\001\000\001\000\000\000\
\002\000\002\000\002\000\002\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\179\000\001\000\000\000\
\004\000\018\000\019\000\097\000\000\000\180\000\000\000\000\000\
\174\000\175\000\000\000\181\000\000\000\045\000\046\000\000\000\
\047\000\048\000\049\000\182\000\000\000\000\000\012\000\155\000\
\000\000\092\000\000\000\000\000\000\000\005\000\000\000\084\000\
\000\000\008\000\000\000\137\000\000\000\009\000\000\000\141\000\
\000\000\149\000\150\000\010\000\145\000\000\000\000\000\011\000\
\000\000\151\000\000\000\000\000\006\000\000\000\007\000\000\000\
\014\000\013\000\000\000\160\000\000\000\168\000\015\000\169\000\
\016\000\170\000\017\000\002\000\101\000\100\000\000\000\000\000\
\000\000\000\000\172\000\000\000\000\000\000\000\043\000\000\000\
\000\000\000\000\040\000\000\000\000\000\000\000\000\000\000\000\
\000\000\086\000\000\000\139\000\000\000\143\000\147\000\000\000\
\000\000\153\000\000\000\000\000\000\000\000\000\167\000\156\000\
\157\000\158\000\159\000\000\000\162\000\000\000\177\000\178\000\
\173\000\051\000\052\000\044\000\026\000\000\000\000\000\020\000\
\022\000\000\000\000\000\024\000\021\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\166\000\163\000\000\000\
\027\000\041\000\031\000\032\000\000\000\033\000\034\000\035\000\
\000\000\000\000\094\000\000\000\140\000\000\000\000\000\000\000\
\000\000\000\000\112\000\000\000\000\000\071\000\000\000\111\000\
\098\000\000\000\000\000\000\000\000\000\000\000\025\000\029\000\
\000\000\144\000\000\000\154\000\000\000\072\000\073\000\074\000\
\000\000\076\000\075\000\000\000\000\000\114\000\000\000\000\000\
\000\000\000\000\000\000\000\000\164\000\000\000\030\000\000\000\
\103\000\104\000\091\000\087\000\000\000\000\000\148\000\000\000\
\107\000\000\000\000\000\083\000\000\000\068\000\000\000\000\000\
\000\000\000\000\000\000\059\000\000\000\000\000\000\000\037\000\
\090\000\000\000\000\000\109\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\070\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\053\000\000\000\000\000\000\000\000\000\061\000\000\000\057\000\
\000\000\000\000\000\000\000\000\077\000\000\000\000\000\000\000\
\000\000\063\000\000\000\000\000\000\000\000\000\000\000\038\000\
\000\000\000\000\000\000\000\000\000\000\062\000\000\000\000\000\
\000\000\000\000\000\000\106\000\000\000\000\000\000\000\078\000\
\000\000\000\000\064\000\066\000\000\000\000\000\081\000\000\000\
\000\000\000\000\000\000\000\000\000\000\088\000\000\000\120\000\
\000\000\000\000\115\000\000\000\065\000\055\000\056\000\000\000\
\119\000\118\000\117\000\000\000\000\000\110\000\134\000\000\000\
\130\000\132\000\000\000\000\000\000\000\000\000\128\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\121\000\000\000\
\135\000\136\000\124\000\123\000\133\000\127\000"

let yydgoto = "\005\000\
\022\000\030\000\036\000\044\000\023\000\024\000\025\000\054\000\
\077\000\079\000\058\000\062\000\068\000\072\000\047\000\082\000\
\081\000\087\000\089\000\091\000\026\000\027\000\055\000\144\000\
\145\000\111\000\106\000\169\000\170\000\187\000\188\000\202\000\
\001\001\032\001\048\000\049\000\045\000\102\000\210\000\232\000\
\233\000\212\000\182\000\183\000\204\000\205\000\056\000\057\000\
\220\000\221\000\222\000\032\000\052\000\000\000\190\000\225\000\
\226\000\078\001\179\000\180\000\067\001\091\001\096\001\086\001\
\087\001\088\001\079\001\080\001\089\001\060\000\061\000\064\000\
\065\000\069\000\070\000\071\000\074\000\075\000\132\000\084\000\
\085\000\126\000\127\000\037\000\098\000"

let yysindex = "\192\000\
\073\002\155\255\153\255\024\255\000\000\000\000\006\255\061\255\
\061\255\061\255\061\255\061\255\085\255\061\255\071\255\086\255\
\105\255\061\255\109\255\111\255\115\255\000\000\000\000\073\002\
\000\000\000\000\000\000\000\000\155\255\000\000\155\255\060\255\
\000\000\000\000\159\255\000\000\153\255\000\000\000\000\168\255\
\000\000\000\000\000\000\000\000\024\255\203\255\000\000\000\000\
\006\255\000\000\123\255\112\255\135\255\000\000\126\255\000\000\
\061\255\000\000\130\255\000\000\061\255\000\000\154\255\000\000\
\061\255\000\000\000\000\000\000\000\000\085\255\061\255\000\000\
\061\255\000\000\061\255\165\255\000\000\173\255\000\000\197\255\
\000\000\000\000\158\255\000\000\061\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\214\255\159\255\
\159\255\208\255\000\000\168\255\168\255\216\255\000\000\224\255\
\226\255\024\255\000\000\112\255\203\255\222\255\112\255\112\255\
\230\255\000\000\061\255\000\000\061\255\000\000\000\000\061\255\
\217\255\000\000\233\255\112\255\236\255\197\255\000\000\000\000\
\000\000\000\000\000\000\061\255\000\000\112\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\231\255\225\255\000\000\
\000\000\157\255\061\255\000\000\000\000\229\255\112\255\227\255\
\228\255\061\255\235\255\209\255\202\255\000\000\000\000\240\000\
\000\000\000\000\000\000\000\000\020\255\000\000\000\000\000\000\
\234\255\157\255\000\000\112\255\000\000\061\255\061\255\112\255\
\112\255\010\255\000\000\209\255\032\255\000\000\112\255\000\000\
\000\000\205\255\237\255\183\255\205\255\205\255\000\000\000\000\
\240\255\000\000\112\255\000\000\221\255\000\000\000\000\000\000\
\010\255\000\000\000\000\010\255\238\255\000\000\255\254\196\255\
\201\255\032\255\207\255\211\255\000\000\198\255\000\000\205\255\
\000\000\000\000\000\000\000\000\240\255\010\255\000\000\010\255\
\000\000\221\255\200\255\000\000\255\255\000\000\255\255\234\254\
\116\255\255\254\255\254\000\000\255\254\202\255\255\255\000\000\
\000\000\245\255\246\255\000\000\255\255\248\255\212\255\255\255\
\255\254\012\255\255\255\255\255\132\255\156\255\223\255\000\000\
\204\255\213\255\155\255\155\255\210\255\041\255\011\000\255\255\
\000\000\223\255\255\255\036\255\218\255\000\000\163\255\000\000\
\017\000\255\255\025\000\030\000\000\000\255\255\112\255\242\255\
\244\255\000\000\255\255\255\255\002\000\004\000\017\000\000\000\
\183\255\047\000\048\000\250\255\016\000\000\000\255\255\018\000\
\251\255\022\000\023\000\000\000\255\255\202\255\037\000\000\000\
\073\000\019\000\000\000\000\000\255\254\255\254\000\000\112\255\
\079\000\160\255\029\000\161\255\164\255\000\000\112\255\000\000\
\160\255\160\255\000\000\160\255\000\000\000\000\000\000\049\000\
\000\000\000\000\000\000\077\000\077\000\000\000\000\000\031\255\
\000\000\000\000\042\255\024\255\042\255\080\000\000\000\077\000\
\077\000\042\255\042\255\000\000\071\000\000\000\000\000\042\255\
\000\000\000\000\000\000\000\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\072\000\088\001\090\001\000\000\000\000\111\002\000\000\
\000\000\148\002\170\002\207\002\229\002\011\003\000\000\000\000\
\000\000\048\003\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\072\000\000\000\072\000\000\000\
\000\000\000\000\084\000\000\000\088\001\000\000\000\000\094\000\
\000\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\
\111\002\000\000\000\000\134\255\000\000\000\000\000\000\000\000\
\148\002\000\000\000\000\000\000\170\002\000\000\000\000\000\000\
\207\002\000\000\000\000\000\000\000\000\229\002\000\000\000\000\
\000\000\000\000\011\003\000\000\000\000\000\000\000\000\069\003\
\000\000\000\000\000\000\000\000\048\003\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\084\000\
\084\000\000\000\000\000\094\000\094\000\000\000\000\000\000\000\
\000\000\078\000\000\000\090\003\000\000\070\255\001\000\090\003\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\130\001\000\000\069\003\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\108\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\096\000\000\000\000\000\000\000\000\000\168\001\000\000\
\000\000\000\000\000\000\112\003\246\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\171\255\000\000\000\000\000\000\
\000\000\096\000\000\000\034\001\000\000\000\000\000\000\168\001\
\190\001\097\000\000\000\112\003\067\000\000\000\227\001\000\000\
\000\000\057\000\000\000\105\000\119\255\119\255\000\000\000\000\
\009\002\000\000\072\001\000\000\150\003\000\000\000\000\000\000\
\059\000\000\000\000\000\008\255\000\000\000\000\000\000\000\000\
\000\000\067\000\000\000\000\000\000\000\000\000\000\000\107\000\
\000\000\000\000\000\000\000\000\009\002\097\000\000\000\097\000\
\000\000\150\003\000\000\000\000\000\000\000\000\000\000\000\000\
\045\255\000\000\000\000\000\000\000\000\076\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\079\255\000\000\
\000\000\060\000\072\000\072\000\000\000\060\000\000\000\000\000\
\000\000\059\255\000\000\000\000\000\000\000\000\000\000\000\000\
\109\000\000\000\000\000\000\000\000\000\000\000\088\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\109\000\000\000\
\063\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\114\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\034\001\
\000\000\030\002\000\000\000\000\000\000\000\000\088\000\000\000\
\030\002\030\002\000\000\030\002\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\051\002\038\000\000\000\000\000\121\000\
\000\000\000\000\151\000\078\000\151\000\000\000\000\000\051\002\
\051\002\151\000\151\000\188\000\000\000\225\000\000\000\109\001\
\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\089\001\215\255\104\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\006\000\017\001\
\206\255\000\000\025\001\230\000\000\000\000\000\106\255\074\255\
\019\255\115\000\098\001\000\000\000\000\118\000\000\000\039\255\
\049\004\194\000\167\000\104\000\000\000\151\255\096\001\000\000\
\189\000\000\000\000\000\232\255\254\255\000\000\000\000\187\000\
\000\000\133\255\234\000\000\000\240\254\082\255\000\000\096\255\
\000\000\000\000\082\000\083\000\000\000\100\001\000\000\097\001\
\000\000\093\001\000\000\000\000\091\001\000\000\000\000\079\001\
\000\000\000\000\039\001\000\000\127\000"

let yytablesize = 1374
let yytable = "\028\000\
\023\000\110\000\042\000\103\000\093\000\216\000\094\000\005\001\
\059\000\063\000\028\000\073\000\028\000\051\000\053\000\083\000\
\253\000\254\000\046\000\255\000\028\000\185\000\082\000\248\000\
\038\000\039\000\024\001\198\000\199\000\200\000\249\000\010\001\
\028\000\064\001\040\000\214\000\083\001\129\000\217\000\218\000\
\036\001\041\000\042\000\043\000\064\001\060\000\041\001\090\001\
\073\001\074\001\252\000\075\001\230\000\198\000\199\000\200\000\
\231\000\050\001\059\000\067\000\148\000\050\000\063\000\084\001\
\143\000\240\000\082\000\201\000\120\000\011\001\121\000\076\000\
\073\000\156\000\095\000\069\000\207\000\186\000\093\000\054\000\
\208\000\209\000\083\000\160\000\093\000\027\001\078\000\026\001\
\060\000\060\000\060\000\060\001\061\001\060\000\060\000\227\000\
\060\000\060\000\228\000\022\001\173\000\018\001\067\000\067\000\
\067\000\080\000\045\001\067\000\067\000\086\000\067\000\088\000\
\151\000\069\000\152\000\090\000\242\000\153\000\243\000\066\000\
\067\000\193\000\054\000\054\000\109\000\196\000\197\000\054\000\
\054\000\159\000\102\000\108\000\213\000\198\000\199\000\200\000\
\102\000\102\000\102\000\068\001\113\000\023\000\023\000\112\000\
\223\000\115\000\068\001\068\001\023\000\068\001\122\000\176\000\
\171\000\033\000\034\000\028\000\029\000\163\000\164\000\096\000\
\097\000\085\001\064\001\035\000\065\001\066\001\250\000\165\000\
\100\000\101\000\117\000\194\000\195\000\251\000\166\000\167\000\
\168\000\102\000\092\001\123\000\094\001\124\000\102\000\015\001\
\249\000\099\001\100\001\126\000\102\000\102\000\102\000\102\001\
\001\000\002\000\003\000\004\000\128\000\129\000\130\000\131\000\
\198\000\199\000\200\000\104\000\105\000\028\000\185\000\016\001\
\249\000\029\001\030\001\125\000\070\001\249\000\134\000\071\001\
\249\000\138\000\139\000\137\000\097\001\098\001\135\000\136\000\
\125\000\141\000\142\000\140\000\037\001\147\000\150\000\154\000\
\161\000\155\000\019\001\020\001\157\000\172\000\162\000\184\000\
\178\000\174\000\175\000\177\000\181\000\069\000\234\000\191\000\
\215\000\219\000\224\000\235\000\229\000\237\000\238\000\028\000\
\239\000\023\000\245\000\003\001\004\001\062\001\007\001\017\001\
\023\000\023\000\023\000\023\001\072\001\021\001\008\001\023\000\
\042\000\018\001\031\001\249\000\028\001\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\034\001\
\131\000\131\000\093\001\131\000\035\001\038\001\039\001\046\001\
\047\001\049\001\042\001\057\001\043\001\048\001\052\001\023\000\
\023\000\023\000\129\000\129\000\129\000\129\000\129\000\129\000\
\129\000\129\000\129\000\129\000\129\000\051\001\131\000\023\000\
\053\001\054\001\129\000\129\000\069\000\058\001\059\001\063\001\
\069\001\077\001\076\001\095\001\101\001\069\000\099\000\171\000\
\069\000\042\000\069\000\042\000\129\000\129\000\129\000\176\000\
\069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
\069\000\050\000\069\000\023\000\122\000\028\000\058\000\082\000\
\069\000\069\000\069\000\102\000\036\000\082\000\102\000\079\000\
\105\000\023\000\080\000\069\000\122\000\099\000\069\000\092\000\
\149\000\023\000\069\000\069\000\069\000\146\000\069\000\069\000\
\069\000\069\000\069\000\069\000\069\000\069\000\069\000\192\000\
\069\000\044\001\107\000\236\000\000\001\056\001\069\000\069\000\
\114\000\241\000\122\000\122\000\244\000\206\000\081\001\082\001\
\116\000\118\000\119\000\133\000\158\000\122\000\000\000\023\000\
\069\000\069\000\069\000\122\000\122\000\122\000\122\000\122\000\
\122\000\122\000\122\000\122\000\122\000\122\000\000\000\000\000\
\000\000\000\000\000\000\122\000\122\000\023\000\000\000\124\000\
\126\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\122\000\122\000\122\000\
\126\000\126\000\126\000\126\000\126\000\126\000\126\000\126\000\
\126\000\126\000\126\000\000\000\000\000\000\000\000\000\000\000\
\126\000\126\000\023\000\000\000\123\000\125\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\126\000\126\000\126\000\125\000\125\000\125\000\
\125\000\125\000\125\000\125\000\125\000\125\000\125\000\125\000\
\000\000\000\000\069\000\000\000\069\000\125\000\125\000\000\000\
\089\000\000\000\069\000\069\000\069\000\069\000\069\000\069\000\
\069\000\069\000\069\000\000\000\069\000\000\000\000\000\125\000\
\125\000\125\000\069\000\069\000\000\000\116\000\000\000\000\000\
\000\000\000\000\023\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\023\000\069\000\069\000\069\000\000\000\
\000\000\000\000\129\000\000\000\000\000\000\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\000\000\
\023\000\000\000\000\000\000\000\000\000\000\000\023\000\023\000\
\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\023\000\023\000\023\000\000\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\000\000\023\000\000\000\
\000\000\000\000\023\000\023\000\023\000\023\000\039\000\000\000\
\000\000\122\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\023\000\023\000\
\023\000\122\000\122\000\122\000\122\000\122\000\122\000\122\000\
\122\000\122\000\122\000\122\000\000\000\000\000\000\000\000\000\
\000\000\122\000\122\000\085\000\000\000\000\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\000\000\
\023\000\023\000\000\000\122\000\122\000\122\000\023\000\023\000\
\023\000\138\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\023\000\023\000\023\000\000\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\000\000\023\000\000\000\
\000\000\000\000\000\000\000\000\023\000\023\000\142\000\000\000\
\000\000\000\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\000\000\023\000\023\000\
\023\000\000\000\023\000\023\000\146\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\023\000\000\000\000\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\000\000\023\000\000\000\000\000\000\000\000\000\000\000\023\000\
\023\000\089\000\152\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\023\000\023\000\023\000\000\000\089\000\089\000\089\000\
\089\000\089\000\089\000\089\000\089\000\089\000\000\000\089\000\
\000\000\000\000\000\000\000\000\000\000\089\000\089\000\161\000\
\000\000\000\000\116\000\116\000\116\000\116\000\116\000\116\000\
\116\000\116\000\116\000\000\000\116\000\116\000\000\000\089\000\
\089\000\089\000\116\000\116\000\165\000\000\000\000\000\129\000\
\129\000\129\000\129\000\129\000\129\000\129\000\129\000\129\000\
\129\000\129\000\000\000\000\000\116\000\116\000\116\000\129\000\
\129\000\023\000\000\000\000\000\000\000\007\000\008\000\009\000\
\010\000\011\000\012\000\013\000\014\000\015\000\000\000\016\000\
\000\000\129\000\129\000\129\000\000\000\017\000\018\000\113\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\019\000\
\020\000\021\000\000\000\039\000\039\000\039\000\039\000\039\000\
\039\000\039\000\039\000\039\000\000\000\039\000\000\000\000\000\
\000\000\000\000\000\000\039\000\039\000\108\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\039\000\039\000\039\000\
\085\000\085\000\085\000\085\000\085\000\085\000\085\000\085\000\
\085\000\000\000\085\000\000\000\000\000\000\000\000\000\000\000\
\085\000\085\000\000\000\000\000\000\000\000\000\138\000\138\000\
\138\000\138\000\138\000\138\000\138\000\138\000\138\000\000\000\
\138\000\000\000\085\000\085\000\085\000\000\000\138\000\138\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\138\000\138\000\138\000\142\000\142\000\142\000\142\000\142\000\
\142\000\142\000\142\000\142\000\000\000\142\000\000\000\000\000\
\000\000\000\000\000\000\142\000\142\000\000\000\000\000\000\000\
\000\000\146\000\146\000\146\000\146\000\146\000\146\000\146\000\
\146\000\146\000\000\000\146\000\000\000\142\000\142\000\142\000\
\000\000\146\000\146\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\146\000\146\000\146\000\000\000\152\000\
\152\000\152\000\152\000\152\000\152\000\152\000\152\000\152\000\
\000\000\152\000\000\000\000\000\000\000\000\000\000\000\152\000\
\152\000\000\000\031\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\152\000\152\000\152\000\161\000\161\000\161\000\161\000\
\161\000\161\000\161\000\161\000\161\000\031\000\161\000\031\000\
\000\000\000\000\000\000\000\000\161\000\161\000\000\000\000\000\
\000\000\165\000\165\000\165\000\165\000\165\000\165\000\165\000\
\165\000\165\000\000\000\165\000\000\000\000\000\161\000\161\000\
\161\000\165\000\165\000\000\000\000\000\000\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\000\000\
\023\000\000\000\000\000\165\000\165\000\165\000\023\000\023\000\
\000\000\000\000\000\000\000\000\113\000\113\000\113\000\113\000\
\113\000\113\000\113\000\113\000\113\000\000\000\113\000\000\000\
\023\000\023\000\023\000\000\000\113\000\113\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\113\000\113\000\
\113\000\000\000\108\000\108\000\108\000\108\000\108\000\108\000\
\108\000\108\000\108\000\000\000\108\000\000\000\000\000\000\000\
\000\000\000\000\108\000\108\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\108\000\108\000\108\000\000\000\
\000\000\000\000\000\000\000\000\000\000\189\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\203\000\000\000\000\000\211\000\000\000\000\000\
\000\000\000\000\189\000\000\000\000\000\189\000\189\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\203\000\000\000\000\000\203\000\000\000\000\000\000\000\
\000\000\000\000\211\000\000\000\000\000\000\000\000\000\000\000\
\189\000\000\000\000\000\000\000\000\000\000\000\203\000\000\000\
\203\000\000\000\000\000\000\000\000\000\246\000\000\000\247\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\001\
\000\000\000\000\000\000\000\000\000\000\006\001\000\000\000\000\
\009\001\000\000\012\001\013\001\014\001\000\000\000\000\000\000\
\000\000\000\000\000\000\031\000\031\000\000\000\000\000\000\000\
\002\001\000\000\000\000\025\001\000\000\000\000\000\000\000\000\
\000\000\000\000\033\001\000\000\000\000\000\000\002\001\000\000\
\000\000\000\000\000\000\040\001\002\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\001\
\000\000\000\000\000\000\000\000\000\000\055\001"

let yycheck = "\001\001\
\000\000\052\000\000\000\045\000\029\000\188\000\031\000\245\000\
\011\000\012\000\001\001\014\000\001\001\008\000\009\000\018\000\
\234\000\235\000\013\001\237\000\001\001\002\001\015\001\046\001\
\001\001\002\001\008\001\018\001\019\001\020\001\053\001\249\000\
\001\001\003\001\011\001\186\000\006\001\000\000\189\000\190\000\
\022\001\018\001\019\001\020\001\003\001\001\001\028\001\006\001\
\065\001\066\001\233\000\068\001\054\001\018\001\019\001\020\001\
\058\001\039\001\061\000\001\001\111\000\001\001\065\000\033\001\
\106\000\216\000\059\001\058\001\071\000\058\001\073\000\001\001\
\075\000\124\000\015\001\000\000\045\001\058\001\009\001\001\001\
\049\001\050\001\085\000\134\000\015\001\012\001\001\001\052\001\
\044\001\045\001\046\001\053\001\054\001\049\001\050\001\201\000\
\052\001\053\001\204\000\059\001\151\000\061\001\044\001\045\001\
\046\001\001\001\033\001\049\001\050\001\001\001\052\001\001\001\
\115\000\000\000\117\000\001\001\222\000\120\000\224\000\035\001\
\036\001\172\000\044\001\045\001\013\001\176\000\177\000\049\001\
\050\001\132\000\012\001\009\001\183\000\018\001\019\001\020\001\
\018\001\019\001\020\001\058\001\015\001\008\001\009\001\009\001\
\195\000\016\001\065\001\066\001\015\001\068\001\000\000\154\000\
\147\000\001\001\002\001\001\001\002\001\001\001\002\001\001\001\
\002\001\080\001\003\001\011\001\005\001\006\001\051\001\011\001\
\001\001\002\001\017\001\174\000\175\000\058\001\018\001\019\001\
\020\001\059\001\083\001\015\001\085\001\009\001\012\001\052\001\
\053\001\090\001\091\001\000\000\018\001\019\001\020\001\096\001\
\001\000\002\000\003\000\004\000\039\001\040\001\041\001\042\001\
\018\001\019\001\020\001\001\001\002\001\001\001\002\001\052\001\
\053\001\047\001\048\001\015\001\052\001\053\001\001\001\052\001\
\053\001\100\000\101\000\012\001\088\001\089\001\096\000\097\000\
\000\000\002\001\001\001\012\001\023\001\008\001\001\001\015\001\
\002\001\001\001\003\001\004\001\001\001\009\001\014\001\000\000\
\032\001\015\001\015\001\009\001\043\001\000\000\051\001\014\001\
\012\001\010\001\030\001\051\001\015\001\047\001\044\001\001\001\
\059\001\001\001\059\001\015\001\015\001\056\001\015\001\060\001\
\008\001\009\001\010\001\001\001\063\001\060\001\059\001\015\001\
\014\001\061\001\002\001\053\001\059\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\000\000\034\001\035\001\036\001\037\001\038\001\015\001\
\003\001\004\001\084\001\006\001\015\001\060\001\059\001\001\001\
\001\001\034\001\049\001\015\001\049\001\060\001\060\001\055\001\
\056\001\057\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\052\001\033\001\000\000\
\051\001\051\001\037\001\038\001\001\001\005\001\060\001\001\001\
\052\001\005\001\034\001\004\001\014\001\010\001\015\001\000\000\
\013\001\000\000\015\001\014\001\055\001\056\001\057\001\012\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\012\001\031\001\000\000\000\000\014\001\044\001\015\001\
\037\001\038\001\001\001\059\001\012\001\059\001\012\001\060\001\
\012\001\034\001\060\001\010\001\004\001\037\000\013\001\024\000\
\112\000\000\000\055\001\056\001\057\001\109\000\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\170\000\
\031\001\031\001\049\000\210\000\238\000\046\001\037\001\038\001\
\057\000\221\000\004\001\005\001\226\000\180\000\077\001\077\001\
\061\000\065\000\070\000\085\000\126\000\075\000\255\255\000\000\
\055\001\056\001\057\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\255\255\255\255\
\255\255\255\255\255\255\037\001\038\001\000\000\255\255\004\001\
\005\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\055\001\056\001\057\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\255\255\255\255\255\255\255\255\255\255\
\037\001\038\001\000\000\255\255\004\001\005\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\055\001\056\001\057\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\255\255\255\255\013\001\255\255\015\001\037\001\038\001\255\255\
\000\000\255\255\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\255\255\031\001\255\255\255\255\055\001\
\056\001\057\001\037\001\038\001\255\255\000\000\255\255\255\255\
\255\255\255\255\001\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\010\001\055\001\056\001\057\001\255\255\
\255\255\255\255\000\000\255\255\255\255\255\255\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\255\255\
\031\001\255\255\255\255\255\255\255\255\255\255\037\001\038\001\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\055\001\056\001\057\001\255\255\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\255\255\031\001\255\255\
\255\255\255\255\035\001\036\001\037\001\038\001\000\000\255\255\
\255\255\005\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\055\001\056\001\
\057\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\255\255\255\255\255\255\255\255\
\255\255\037\001\038\001\000\000\255\255\255\255\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\255\255\
\031\001\032\001\255\255\055\001\056\001\057\001\037\001\038\001\
\001\001\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\055\001\056\001\057\001\255\255\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\255\255\031\001\255\255\
\255\255\255\255\255\255\255\255\037\001\038\001\000\000\255\255\
\255\255\255\255\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\255\255\055\001\056\001\
\057\001\255\255\037\001\038\001\000\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\015\001\255\255\255\255\055\001\056\001\057\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\255\255\031\001\255\255\255\255\255\255\255\255\255\255\037\001\
\038\001\001\001\000\000\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\055\001\056\001\057\001\255\255\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\255\255\031\001\
\255\255\255\255\255\255\255\255\255\255\037\001\038\001\000\000\
\255\255\255\255\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\255\255\031\001\032\001\255\255\055\001\
\056\001\057\001\037\001\038\001\000\000\255\255\255\255\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\255\255\255\255\055\001\056\001\057\001\037\001\
\038\001\000\000\255\255\255\255\255\255\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\255\255\031\001\
\255\255\055\001\056\001\057\001\255\255\037\001\038\001\000\000\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\055\001\
\056\001\057\001\255\255\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\255\255\031\001\255\255\255\255\
\255\255\255\255\255\255\037\001\038\001\000\000\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\055\001\056\001\057\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\255\255\031\001\255\255\255\255\255\255\255\255\255\255\
\037\001\038\001\255\255\255\255\255\255\255\255\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\255\255\
\031\001\255\255\055\001\056\001\057\001\255\255\037\001\038\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\055\001\056\001\057\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\255\255\031\001\255\255\255\255\
\255\255\255\255\255\255\037\001\038\001\255\255\255\255\255\255\
\255\255\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\255\255\031\001\255\255\055\001\056\001\057\001\
\255\255\037\001\038\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\055\001\056\001\057\001\255\255\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\255\255\031\001\255\255\255\255\255\255\255\255\255\255\037\001\
\038\001\255\255\002\000\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\055\001\056\001\057\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\029\000\031\001\031\000\
\255\255\255\255\255\255\255\255\037\001\038\001\255\255\255\255\
\255\255\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\255\255\031\001\255\255\255\255\055\001\056\001\
\057\001\037\001\038\001\255\255\255\255\255\255\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\255\255\
\031\001\255\255\255\255\055\001\056\001\057\001\037\001\038\001\
\255\255\255\255\255\255\255\255\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\255\255\031\001\255\255\
\055\001\056\001\057\001\255\255\037\001\038\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\055\001\056\001\
\057\001\255\255\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\255\255\031\001\255\255\255\255\255\255\
\255\255\255\255\037\001\038\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\055\001\056\001\057\001\255\255\
\255\255\255\255\255\255\255\255\255\255\165\000\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\178\000\255\255\255\255\181\000\255\255\255\255\
\255\255\255\255\186\000\255\255\255\255\189\000\190\000\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\201\000\255\255\255\255\204\000\255\255\255\255\255\255\
\255\255\255\255\210\000\255\255\255\255\255\255\255\255\255\255\
\216\000\255\255\255\255\255\255\255\255\255\255\222\000\255\255\
\224\000\255\255\255\255\255\255\255\255\229\000\255\255\231\000\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\239\000\
\255\255\255\255\255\255\255\255\255\255\245\000\255\255\255\255\
\248\000\255\255\250\000\251\000\252\000\255\255\255\255\255\255\
\255\255\255\255\255\255\003\001\004\001\255\255\255\255\255\255\
\008\001\255\255\255\255\011\001\255\255\255\255\255\255\255\255\
\255\255\255\255\018\001\255\255\255\255\255\255\022\001\255\255\
\255\255\255\255\255\255\027\001\028\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\039\001\
\255\255\255\255\255\255\255\255\255\255\045\001"

let yynames_const = "\
  EOF\000\
  COMMA\000\
  CCE\000\
  BAR\000\
  DOUBLELEFTBRACKET\000\
  DOUBLERIGHTBRACKET\000\
  DOUBLELEFTBRACE\000\
  DOUBLERIGHTBRACE\000\
  COLONCOLON\000\
  LTCOLONCOLON\000\
  UNDERSCORECOLONCOLON\000\
  DOTDOT\000\
  DOTDOTDOT\000\
  DOTDOTDOTDOT\000\
  EMBED\000\
  METAVAR\000\
  INDEXVAR\000\
  RULES\000\
  SUBRULES\000\
  CONTEXTRULES\000\
  SUBSTITUTIONS\000\
  FREEVARS\000\
  DEFNCLASS\000\
  DEFN\000\
  FUNDEFNCLASS\000\
  FUNDEFN\000\
  DEFNCOM\000\
  BY\000\
  SINGLE\000\
  MULTIPLE\000\
  HOMS\000\
  PARSING\000\
  LTEQ\000\
  LEFT\000\
  RIGHT\000\
  NON\000\
  BIND_LEFT_DELIM\000\
  BIND_RIGHT_DELIM\000\
  BIND\000\
  IN\000\
  EQ\000\
  HASH\000\
  NAMES\000\
  DISTINCTNAMES\000\
  LPAREN\000\
  RPAREN\000\
  UNION\000\
  EMPTY\000\
  COQSECTIONBEGIN\000\
  COQSECTIONEND\000\
  COQVARIABLE\000\
  COMP_LEFT\000\
  COMP_MIDDLE\000\
  COMP_RIGHT\000\
  COMP_IN\000\
  "

let yynames_block = "\
  STRING\000\
  BLANKS\000\
  LINE\000\
  LINELINE\000\
  BLANKLINE\000\
  COMMENTLINE\000\
  INTERSTITIAL\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'items) in
    Obj.repr(
# 136 "grammar_parser.mly"
            ( _1 )
# 801 "grammar_parser.ml"
               : Types.raw_item list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'item) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'items) in
    Obj.repr(
# 139 "grammar_parser.mly"
                                  ( _1 :: _2 )
# 809 "grammar_parser.ml"
               : 'items))
; (fun __caml_parser_env ->
    Obj.repr(
# 140 "grammar_parser.mly"
                                  ( [] )
# 815 "grammar_parser.ml"
               : 'items))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'metavardefn) in
    Obj.repr(
# 143 "grammar_parser.mly"
                                  ( _1 )
# 822 "grammar_parser.ml"
               : 'item))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'rules) in
    Obj.repr(
# 144 "grammar_parser.mly"
                                  ( _2 )
# 829 "grammar_parser.ml"
               : 'item))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'defnclass) in
    Obj.repr(
# 145 "grammar_parser.mly"
                                  ( _2 )
# 836 "grammar_parser.ml"
               : 'item))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fundefnclass) in
    Obj.repr(
# 146 "grammar_parser.mly"
                                  ( _2 )
# 843 "grammar_parser.ml"
               : 'item))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'subrules) in
    Obj.repr(
# 147 "grammar_parser.mly"
                                  ( _2 )
# 850 "grammar_parser.ml"
               : 'item))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'contextrules) in
    Obj.repr(
# 148 "grammar_parser.mly"
                                  ( _2 )
# 857 "grammar_parser.ml"
               : 'item))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'substitutions) in
    Obj.repr(
# 149 "grammar_parser.mly"
                                  ( _2 )
# 864 "grammar_parser.ml"
               : 'item))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'freevars) in
    Obj.repr(
# 150 "grammar_parser.mly"
                                  ( _2 )
# 871 "grammar_parser.ml"
               : 'item))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'embed) in
    Obj.repr(
# 151 "grammar_parser.mly"
                                  ( _2 )
# 878 "grammar_parser.ml"
               : 'item))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'parsing_annotations) in
    Obj.repr(
# 152 "grammar_parser.mly"
                                  ( _2 )
# 885 "grammar_parser.ml"
               : 'item))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'hom_section) in
    Obj.repr(
# 153 "grammar_parser.mly"
                                  ( _2 )
# 892 "grammar_parser.ml"
               : 'item))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'coq_section_begin) in
    Obj.repr(
# 154 "grammar_parser.mly"
                                     ( _2 )
# 899 "grammar_parser.ml"
               : 'item))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'coq_section_end) in
    Obj.repr(
# 155 "grammar_parser.mly"
                                     ( _2 )
# 906 "grammar_parser.ml"
               : 'item))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'coq_variable) in
    Obj.repr(
# 156 "grammar_parser.mly"
                                     ( _2 )
# 913 "grammar_parser.ml"
               : 'item))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'metavardefn_int) in
    Obj.repr(
# 160 "grammar_parser.mly"
     ( Raw_item_md _1 )
# 920 "grammar_parser.ml"
               : 'metavardefn))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'indexvardefn_int) in
    Obj.repr(
# 162 "grammar_parser.mly"
     ( Raw_item_md _1 )
# 927 "grammar_parser.ml"
               : 'metavardefn))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'ne_ident_hom_desc_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'metavarrep) in
    Obj.repr(
# 166 "grammar_parser.mly"
     ( { raw_mvd_name = fst(List.hd(_2));
         raw_mvd_names = _2;
	 raw_mvd_rep = _4; 
         raw_mvd_indexvar = false;
         raw_mvd_loc = mkl() } )
# 939 "grammar_parser.ml"
               : 'metavardefn_int))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'ne_ident_hom_desc_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'metavarrep) in
    Obj.repr(
# 174 "grammar_parser.mly"
     ( { raw_mvd_name = fst(List.hd(_2));
         raw_mvd_names = _2;
	 raw_mvd_rep = _4;
         raw_mvd_indexvar = true;
         raw_mvd_loc = mkl() } )
# 951 "grammar_parser.ml"
               : 'indexvardefn_int))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'homomorphism_list) in
    Obj.repr(
# 181 "grammar_parser.mly"
                                  ( _1 )
# 958 "grammar_parser.ml"
               : 'metavarrep))
; (fun __caml_parser_env ->
    Obj.repr(
# 184 "grammar_parser.mly"
                                  ( [] )
# 964 "grammar_parser.ml"
               : 'homomorphism_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'homomorphism) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'homomorphism_list) in
    Obj.repr(
# 185 "grammar_parser.mly"
                                  ( _1::_2 )
# 972 "grammar_parser.ml"
               : 'homomorphism_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'hom_name) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'hom_spec_el_list) in
    Obj.repr(
# 189 "grammar_parser.mly"
     ( (_2, _3, mkl()) )
# 980 "grammar_parser.ml"
               : 'homomorphism))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string*string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 192 "grammar_parser.mly"
                    ( fst _1 )
# 988 "grammar_parser.ml"
               : 'hom_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string*string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 193 "grammar_parser.mly"
                           ( fst _2 )
# 997 "grammar_parser.ml"
               : 'hom_name))
; (fun __caml_parser_env ->
    Obj.repr(
# 196 "grammar_parser.mly"
                                  ( [] )
# 1003 "grammar_parser.ml"
               : 'hom_spec_el_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'hom_spec_el) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'hom_spec_el_list) in
    Obj.repr(
# 197 "grammar_parser.mly"
                                  ( _1::_2 )
# 1011 "grammar_parser.ml"
               : 'hom_spec_el_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'hom_inner) in
    Obj.repr(
# 200 "grammar_parser.mly"
                                                  ( _2 )
# 1018 "grammar_parser.ml"
               : 'hom_spec_el))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string*string) in
    Obj.repr(
# 201 "grammar_parser.mly"
               ( Raw_hom_string (fst _1) )
# 1025 "grammar_parser.ml"
               : 'hom_spec_el))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 202 "grammar_parser.mly"
               ( Raw_hom_blanks _1 )
# 1032 "grammar_parser.ml"
               : 'hom_spec_el))
; (fun __caml_parser_env ->
    Obj.repr(
# 203 "grammar_parser.mly"
                                  ( Raw_hom_string ".." )
# 1038 "grammar_parser.ml"
               : 'hom_spec_el))
; (fun __caml_parser_env ->
    Obj.repr(
# 204 "grammar_parser.mly"
                                  ( Raw_hom_string "..." )
# 1044 "grammar_parser.ml"
               : 'hom_spec_el))
; (fun __caml_parser_env ->
    Obj.repr(
# 205 "grammar_parser.mly"
                                  ( Raw_hom_string "...." )
# 1050 "grammar_parser.ml"
               : 'hom_spec_el))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ident_and_blanks_list) in
    Obj.repr(
# 208 "grammar_parser.mly"
                                  ( Raw_hom_ident _1 )
# 1057 "grammar_parser.ml"
               : 'hom_inner))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ident_and_blanks_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'dots) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ident_and_blanks_list) in
    Obj.repr(
# 210 "grammar_parser.mly"
                                  ( Raw_hom_ident_dots (mkl(),_1,_2,_3) )
# 1066 "grammar_parser.ml"
               : 'hom_inner))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'ident_and_blanks_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'comp_bound) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'blanks_list) in
    Obj.repr(
# 212 "grammar_parser.mly"
                                  ( Raw_hom_ident_comp (mkl(),_2,_4) )
# 1075 "grammar_parser.ml"
               : 'hom_inner))
; (fun __caml_parser_env ->
    Obj.repr(
# 215 "grammar_parser.mly"
                                  ( [] )
# 1081 "grammar_parser.ml"
               : 'embedmorphism_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'embedmorphism) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'embedmorphism_list) in
    Obj.repr(
# 216 "grammar_parser.mly"
                                    ( _1::_2 )
# 1089 "grammar_parser.ml"
               : 'embedmorphism_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'hom_name) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Types.embed_spec_el list) in
    Obj.repr(
# 220 "grammar_parser.mly"
     ( (mkl(), _2, _3) )
# 1097 "grammar_parser.ml"
               : 'embedmorphism))
; (fun __caml_parser_env ->
    Obj.repr(
# 223 "grammar_parser.mly"
                                  ( [] )
# 1103 "grammar_parser.ml"
               : Types.embed_spec_el list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'embed_spec_el) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Types.embed_spec_el list) in
    Obj.repr(
# 224 "grammar_parser.mly"
                                      ( _1::_2 )
# 1111 "grammar_parser.ml"
               : Types.embed_spec_el list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'embed_inner) in
    Obj.repr(
# 228 "grammar_parser.mly"
      ( Embed_inner (mkl(),_2) )
# 1118 "grammar_parser.ml"
               : 'embed_spec_el))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string*string) in
    Obj.repr(
# 229 "grammar_parser.mly"
               ( Embed_string (mkl(),fst _1) )
# 1125 "grammar_parser.ml"
               : 'embed_spec_el))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 230 "grammar_parser.mly"
               ( Embed_string (mkl(),_1) )
# 1132 "grammar_parser.ml"
               : 'embed_spec_el))
; (fun __caml_parser_env ->
    Obj.repr(
# 231 "grammar_parser.mly"
                                  ( Embed_string (mkl(),"..") )
# 1138 "grammar_parser.ml"
               : 'embed_spec_el))
; (fun __caml_parser_env ->
    Obj.repr(
# 232 "grammar_parser.mly"
                                  ( Embed_string (mkl(),"...") )
# 1144 "grammar_parser.ml"
               : 'embed_spec_el))
; (fun __caml_parser_env ->
    Obj.repr(
# 233 "grammar_parser.mly"
                                  ( Embed_string (mkl(),"....") )
# 1150 "grammar_parser.ml"
               : 'embed_spec_el))
; (fun __caml_parser_env ->
    Obj.repr(
# 236 "grammar_parser.mly"
                                  ( "" )
# 1156 "grammar_parser.ml"
               : 'embed_inner))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string*string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'embed_inner) in
    Obj.repr(
# 237 "grammar_parser.mly"
                                  ( (fst _1) ^ _2 )
# 1164 "grammar_parser.ml"
               : 'embed_inner))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'embed_inner) in
    Obj.repr(
# 238 "grammar_parser.mly"
                                  ( _1 ^ _2 )
# 1172 "grammar_parser.ml"
               : 'embed_inner))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'mse) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'ident) in
    Obj.repr(
# 242 "grammar_parser.mly"
                                  ( Raw_Bind (mkl(), _2 ,_4) )
# 1180 "grammar_parser.ml"
               : 'bindspec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'mse) in
    Obj.repr(
# 243 "grammar_parser.mly"
                                  ( Raw_AuxFnDef (mkl(), _1, _3) )
# 1188 "grammar_parser.ml"
               : 'bindspec))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'mse) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'mse) in
    Obj.repr(
# 245 "grammar_parser.mly"
                                  ( Raw_NamesEqual (mkl(), _3, _8) )
# 1196 "grammar_parser.ml"
               : 'bindspec))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'mse) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'mse) in
    Obj.repr(
# 247 "grammar_parser.mly"
                                  ( Raw_NamesDistinct (mkl(), _3, _8) )
# 1204 "grammar_parser.ml"
               : 'bindspec))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'mse) in
    Obj.repr(
# 249 "grammar_parser.mly"
                                  ( Raw_AllNamesDistinct (mkl(), _3) )
# 1211 "grammar_parser.ml"
               : 'bindspec))
; (fun __caml_parser_env ->
    Obj.repr(
# 252 "grammar_parser.mly"
                                  ( [] )
# 1217 "grammar_parser.ml"
               : 'bindspeclist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'bindspec) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'bindspeclist) in
    Obj.repr(
# 253 "grammar_parser.mly"
                                  ( _1 :: _2 )
# 1225 "grammar_parser.ml"
               : 'bindspeclist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ident) in
    Obj.repr(
# 256 "grammar_parser.mly"
                                  ( Raw_MVorNTExp (mkl(), _1) )
# 1232 "grammar_parser.ml"
               : 'mse))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ident) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'dots) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ident) in
    Obj.repr(
# 257 "grammar_parser.mly"
                                  ( Raw_MVorNTListExp_dotform (mkl(), _1, _2, _3) )
# 1241 "grammar_parser.ml"
               : 'mse))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'comp_bound) in
    Obj.repr(
# 258 "grammar_parser.mly"
                                                      ( Raw_MVorNTListExp_comp (mkl(), _2, _4) )
# 1249 "grammar_parser.ml"
               : 'mse))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'ident) in
    Obj.repr(
# 259 "grammar_parser.mly"
                                  ( Raw_Aux (mkl(), _1, _3) )
# 1257 "grammar_parser.ml"
               : 'mse))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'dots) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'ident) in
    Obj.repr(
# 260 "grammar_parser.mly"
                                         ( Raw_AuxList_dotform (mkl(), _1, _3, _4, _5) )
# 1267 "grammar_parser.ml"
               : 'mse))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'ident) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'comp_bound) in
    Obj.repr(
# 261 "grammar_parser.mly"
                                                                          ( Raw_AuxList_comp (mkl(), _1, _4, _6) )
# 1276 "grammar_parser.ml"
               : 'mse))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'ident) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'comp_bound) in
    Obj.repr(
# 262 "grammar_parser.mly"
                                                           ( Raw_AuxList_comp (mkl(), _1, _3, _5) )
# 1285 "grammar_parser.ml"
               : 'mse))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'mse) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'mse) in
    Obj.repr(
# 263 "grammar_parser.mly"
                                  ( Raw_Union (mkl(), _1, _3) )
# 1293 "grammar_parser.ml"
               : 'mse))
; (fun __caml_parser_env ->
    Obj.repr(
# 264 "grammar_parser.mly"
                                  ( Raw_Empty (mkl()) )
# 1299 "grammar_parser.ml"
               : 'mse))
; (fun __caml_parser_env ->
    Obj.repr(
# 267 "grammar_parser.mly"
                                  ( [] )
# 1305 "grammar_parser.ml"
               : 'bindspeclistlist))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'bindspeclist) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'bindspeclistlist) in
    Obj.repr(
# 268 "grammar_parser.mly"
                                                                   (_2 :: _4 )
# 1313 "grammar_parser.ml"
               : 'bindspeclistlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bindspeclistlist) in
    Obj.repr(
# 271 "grammar_parser.mly"
                                 ( List.flatten _1 )
# 1320 "grammar_parser.ml"
               : 'bindspecall))
; (fun __caml_parser_env ->
    Obj.repr(
# 274 "grammar_parser.mly"
                                  ( 0 )
# 1326 "grammar_parser.ml"
               : 'dots))
; (fun __caml_parser_env ->
    Obj.repr(
# 275 "grammar_parser.mly"
                                  ( 1 )
# 1332 "grammar_parser.ml"
               : 'dots))
; (fun __caml_parser_env ->
    Obj.repr(
# 276 "grammar_parser.mly"
                                  ( 2 )
# 1338 "grammar_parser.ml"
               : 'dots))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ident) in
    Obj.repr(
# 279 "grammar_parser.mly"
                                  ( Raw_ident (mkl(), _1) )
# 1345 "grammar_parser.ml"
               : 'element))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'dots) in
    Obj.repr(
# 288 "grammar_parser.mly"
                                  ( Raw_dots (mkl(),_1) )
# 1352 "grammar_parser.ml"
               : 'element))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'element_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'comp_bound) in
    Obj.repr(
# 289 "grammar_parser.mly"
                                                            (Raw_comp(mkl(),_2,_4,None))
# 1360 "grammar_parser.ml"
               : 'element))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'element_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'ident) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'comp_bound) in
    Obj.repr(
# 290 "grammar_parser.mly"
                                                                              (Raw_comp(mkl(),_2,_6,Some _4))
# 1369 "grammar_parser.ml"
               : 'element))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ident) in
    Obj.repr(
# 293 "grammar_parser.mly"
                                    (Raw_bound_comp(mkl(),_1) )
# 1376 "grammar_parser.ml"
               : 'comp_bound))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ident) in
    Obj.repr(
# 294 "grammar_parser.mly"
                                    (Raw_bound_comp_u(mkl(),_1,_3))
# 1384 "grammar_parser.ml"
               : 'comp_bound))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'dots) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'ident) in
    Obj.repr(
# 295 "grammar_parser.mly"
                                    (Raw_bound_comp_lu(mkl(),_1,_3,_4,_5))
# 1394 "grammar_parser.ml"
               : 'comp_bound))
; (fun __caml_parser_env ->
    Obj.repr(
# 298 "grammar_parser.mly"
                                  ( [] )
# 1400 "grammar_parser.ml"
               : 'element_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'element) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'element_list) in
    Obj.repr(
# 299 "grammar_parser.mly"
                                  ( _1 :: _2 )
# 1408 "grammar_parser.ml"
               : 'element_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rule_list) in
    Obj.repr(
# 303 "grammar_parser.mly"
     ( Raw_item_rs _1 )
# 1415 "grammar_parser.ml"
               : 'rules))
; (fun __caml_parser_env ->
    Obj.repr(
# 306 "grammar_parser.mly"
                                  ( [] )
# 1421 "grammar_parser.ml"
               : 'rule_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'rule) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'rule_list) in
    Obj.repr(
# 307 "grammar_parser.mly"
                                  ( _1 :: _2 )
# 1429 "grammar_parser.ml"
               : 'rule_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'ne_ident_hom_desc_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string*string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'homomorphism_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'prodlist) in
    Obj.repr(
# 311 "grammar_parser.mly"
     ( { raw_rule_ntr_name  = fst (List.hd(_1));
         raw_rule_ntr_names = _1;
         raw_rule_pn_wrapper = (fst _3);
         raw_rule_ps = _6;
	 raw_rule_homs = _5;
         raw_rule_categories = ["user"];
         raw_rule_loc = mkl() } )
# 1445 "grammar_parser.ml"
               : 'rule))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'flavour) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'element_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'ident_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : string*string) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'bindspecall) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'homomorphism_list) in
    Obj.repr(
# 321 "grammar_parser.mly"
     ( { raw_prod_name = (fst _6);
         raw_prod_flavour = _1;
         raw_prod_categories = _4;
         raw_prod_es = _2;
	 raw_prod_homs = _8;
         raw_prod_bs = _7;
	 raw_prod_loc = mkl() } )
# 1463 "grammar_parser.ml"
               : 'prod))
; (fun __caml_parser_env ->
    Obj.repr(
# 330 "grammar_parser.mly"
                                  ( [] )
# 1469 "grammar_parser.ml"
               : 'prodlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'prod) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'prodlist) in
    Obj.repr(
# 331 "grammar_parser.mly"
                                  ( _1 :: _2 )
# 1477 "grammar_parser.ml"
               : 'prodlist))
; (fun __caml_parser_env ->
    Obj.repr(
# 334 "grammar_parser.mly"
                                  ( Bar )
# 1483 "grammar_parser.ml"
               : 'flavour))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string*string) in
    Obj.repr(
# 337 "grammar_parser.mly"
                                  (  (fst _1) )
# 1490 "grammar_parser.ml"
               : 'ident_desc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'ident_desc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'homomorphism_list) in
    Obj.repr(
# 340 "grammar_parser.mly"
                                  ( [(_1,_2)] )
# 1498 "grammar_parser.ml"
               : 'ne_ident_hom_desc_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'ident_desc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'homomorphism_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'ne_ident_hom_desc_list) in
    Obj.repr(
# 341 "grammar_parser.mly"
                                                              ( (_1,_2) :: _4 )
# 1507 "grammar_parser.ml"
               : 'ne_ident_hom_desc_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 344 "grammar_parser.mly"
                                  ( [] )
# 1513 "grammar_parser.ml"
               : 'ident_desc_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ident_desc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ident_desc_list) in
    Obj.repr(
# 345 "grammar_parser.mly"
                                        ( _1 :: _3 )
# 1521 "grammar_parser.ml"
               : 'ident_desc_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string*string) in
    Obj.repr(
# 348 "grammar_parser.mly"
                                  ( (mkl(),  (fst _1)) )
# 1528 "grammar_parser.ml"
               : 'ident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 351 "grammar_parser.mly"
                                  ( (mkl(),  (_1)) )
# 1535 "grammar_parser.ml"
               : 'blanks))
; (fun __caml_parser_env ->
    Obj.repr(
# 354 "grammar_parser.mly"
                                  ( [] )
# 1541 "grammar_parser.ml"
               : 'ident_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'ident) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'ident_list) in
    Obj.repr(
# 355 "grammar_parser.mly"
                                  ( _1 :: _2 )
# 1549 "grammar_parser.ml"
               : 'ident_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'ident_list) in
    Obj.repr(
# 356 "grammar_parser.mly"
                                  ( _2 )
# 1557 "grammar_parser.ml"
               : 'ident_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 359 "grammar_parser.mly"
                                  ( [] )
# 1563 "grammar_parser.ml"
               : 'ident_and_blanks_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'ident) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'ident_and_blanks_list) in
    Obj.repr(
# 360 "grammar_parser.mly"
                                  ( _1 :: _2 )
# 1571 "grammar_parser.ml"
               : 'ident_and_blanks_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'blanks) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'ident_and_blanks_list) in
    Obj.repr(
# 361 "grammar_parser.mly"
                                 ( _1 :: _2 )
# 1579 "grammar_parser.ml"
               : 'ident_and_blanks_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 364 "grammar_parser.mly"
                                  ( () )
# 1585 "grammar_parser.ml"
               : 'blanks_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'blanks_list) in
    Obj.repr(
# 365 "grammar_parser.mly"
                                   ( () )
# 1593 "grammar_parser.ml"
               : 'blanks_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string*string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string*string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'homomorphism_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'defn_list) in
    Obj.repr(
# 369 "grammar_parser.mly"
     ( let rdc = { raw_dc_name = (fst _1);
                   raw_dc_homs = _5;
                   raw_dc_wrapper = (fst _3);
                   raw_dc_defns = _6;
		   raw_dc_loc = mkl() } in
       Raw_item_dcs (Raw_RDC rdc) )
# 1608 "grammar_parser.ml"
               : 'defnclass))
; (fun __caml_parser_env ->
    Obj.repr(
# 377 "grammar_parser.mly"
                                 ( [] )
# 1614 "grammar_parser.ml"
               : 'defn_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'defn) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'defn_list) in
    Obj.repr(
# 378 "grammar_parser.mly"
                                 ( _1 :: _2 )
# 1622 "grammar_parser.ml"
               : 'defn_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 9 : 'element_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 7 : 'ident_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 5 : string*string) in
    let _8 = (Parsing.peek_val __caml_parser_env 3 : string*string) in
    let _9 = (Parsing.peek_val __caml_parser_env 2 : 'homomorphism_list) in
    let _11 = (Parsing.peek_val __caml_parser_env 0 : 'semiraw_rule_list) in
    Obj.repr(
# 382 "grammar_parser.mly"
     ( { raw_d_name = (fst _6);
         raw_d_es = _2;
         raw_d_categories = _4;
         raw_d_wrapper = (fst _8);
         raw_d_body = _11;
         raw_d_homs = _9;
         raw_d_loc = mkl() } )
# 1640 "grammar_parser.ml"
               : 'defn))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'ident_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string*string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'homomorphism_list) in
    Obj.repr(
# 392 "grammar_parser.mly"
     ( { dla_name = (fst _3); 
	 dla_categories = _1;
         dla_homs = _4 } )
# 1651 "grammar_parser.ml"
               : Types.raw_drule_line_annot))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string*string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'homomorphism_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'fundefn_list) in
    Obj.repr(
# 398 "grammar_parser.mly"
     ( let frdc = { raw_fdc_name = (fst _1);
                    raw_fdc_homs = _3;
                    raw_fdc_fundefns = _4;
		    raw_fdc_loc = mkl() } in
       Raw_item_dcs (Raw_FDC frdc) )
# 1664 "grammar_parser.ml"
               : 'fundefnclass))
; (fun __caml_parser_env ->
    Obj.repr(
# 405 "grammar_parser.mly"
                                 ( [] )
# 1670 "grammar_parser.ml"
               : 'fundefn_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'fundefn) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fundefn_list) in
    Obj.repr(
# 406 "grammar_parser.mly"
                                       ( _1 :: _2 )
# 1678 "grammar_parser.ml"
               : 'fundefn_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : 'element_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : 'ident) in
    let _6 = (Parsing.peek_val __caml_parser_env 4 : string*string) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : 'homomorphism_list) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : 'anylinelist) in
    Obj.repr(
# 410 "grammar_parser.mly"
     ( { raw_fd_name = (fst _6);
         raw_fd_es = _2;
         raw_fd_result = _4;
         raw_fd_result_type = "dummy, to be replaced by grammar_typecheck";
         raw_fd_pn_wrapper = "dummy, to be replaced by grammar_typecheck";
         raw_fd_clauses = _10;
         raw_fd_homs = _7;
         raw_fd_loc = mkl() } )
# 1697 "grammar_parser.ml"
               : 'fundefn))
; (fun __caml_parser_env ->
    Obj.repr(
# 421 "grammar_parser.mly"
                             ( [] )
# 1703 "grammar_parser.ml"
               : 'anylinelist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'line) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'anylinelist) in
    Obj.repr(
# 422 "grammar_parser.mly"
                               ( _1 :: _2 )
# 1711 "grammar_parser.ml"
               : 'anylinelist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'anylinelist) in
    Obj.repr(
# 423 "grammar_parser.mly"
                               ( (* Raw_commentline (mkl(), $1) ::*) _2 )
# 1719 "grammar_parser.ml"
               : 'anylinelist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'anylinelist) in
    Obj.repr(
# 424 "grammar_parser.mly"
                              ( (* Raw_blankline (mkl(), $1) :: *) _2 )
# 1727 "grammar_parser.ml"
               : 'anylinelist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string*string) in
    Obj.repr(
# 430 "grammar_parser.mly"
                             ( (mkl(),fst _1) )
# 1734 "grammar_parser.ml"
               : 'line))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string*string*string) in
    Obj.repr(
# 433 "grammar_parser.mly"
                             ( let (a,b,_) = _1 in (mkl(), b) )
# 1741 "grammar_parser.ml"
               : 'lineline))
; (fun __caml_parser_env ->
    Obj.repr(
# 436 "grammar_parser.mly"
                             ( [] )
# 1747 "grammar_parser.ml"
               : 'linelist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'line) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'linelist) in
    Obj.repr(
# 437 "grammar_parser.mly"
                            ( _1 :: _2 )
# 1755 "grammar_parser.ml"
               : 'linelist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'linelist) in
    Obj.repr(
# 438 "grammar_parser.mly"
                            ( (* Raw_commentline (mkl(), $1) ::*) _2 )
# 1763 "grammar_parser.ml"
               : 'linelist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'line) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'linelist) in
    Obj.repr(
# 441 "grammar_parser.mly"
                                ( _1 :: _2 )
# 1771 "grammar_parser.ml"
               : 'nelinelist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'linelist) in
    Obj.repr(
# 442 "grammar_parser.mly"
                                ( (* Raw_commentline (mkl(), $1) ::*) (* (mkl(),$1) ::*) _2 )
# 1779 "grammar_parser.ml"
               : 'nelinelist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'linelist) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'lineline) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'linelist) in
    Obj.repr(
# 445 "grammar_parser.mly"
                                ( Lined_rule (mkl(),_1,_2,_3) )
# 1788 "grammar_parser.ml"
               : 'semiraw_rule))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'nelinelist) in
    Obj.repr(
# 446 "grammar_parser.mly"
                                ( Lineless_rule (mkl(),_1) )
# 1795 "grammar_parser.ml"
               : 'semiraw_rule))
; (fun __caml_parser_env ->
    Obj.repr(
# 449 "grammar_parser.mly"
                                ( () )
# 1801 "grammar_parser.ml"
               : 'blanklinelist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'blanklinelist) in
    Obj.repr(
# 450 "grammar_parser.mly"
                                ( (* Raw_blankline (mkl(), $1) :: *) () )
# 1809 "grammar_parser.ml"
               : 'blanklinelist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 453 "grammar_parser.mly"
                                ( () )
# 1816 "grammar_parser.ml"
               : 'neblanklinelist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'neblanklinelist) in
    Obj.repr(
# 454 "grammar_parser.mly"
                                ( (* Raw_blankline (mkl(), $1) :: *) () )
# 1824 "grammar_parser.ml"
               : 'neblanklinelist))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Types.embed_spec_el list) in
    Obj.repr(
# 458 "grammar_parser.mly"
                                               ( Defncom(mkl(),_2) )
# 1831 "grammar_parser.ml"
               : 'defncom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'blanklinelist) in
    Obj.repr(
# 461 "grammar_parser.mly"
                                ( [] )
# 1838 "grammar_parser.ml"
               : 'semiraw_rule_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'neblanklinelist) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'semiraw_rule) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'semiraw_rule_list) in
    Obj.repr(
# 462 "grammar_parser.mly"
                                                  ( _2 :: _3 )
# 1847 "grammar_parser.ml"
               : 'semiraw_rule_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'neblanklinelist) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'defncom) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'semiraw_rule_list) in
    Obj.repr(
# 463 "grammar_parser.mly"
                                             ( _2 :: _3 )
# 1856 "grammar_parser.ml"
               : 'semiraw_rule_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'subrules_body) in
    Obj.repr(
# 468 "grammar_parser.mly"
     ( Raw_item_srs _1 )
# 1863 "grammar_parser.ml"
               : 'subrules))
; (fun __caml_parser_env ->
    Obj.repr(
# 471 "grammar_parser.mly"
                             ( [] )
# 1869 "grammar_parser.ml"
               : 'subrules_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'subrule) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'subrules_body) in
    Obj.repr(
# 472 "grammar_parser.mly"
                             ( _1 :: _2 )
# 1877 "grammar_parser.ml"
               : 'subrules_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'ident_desc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'ident_desc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'homomorphism_list) in
    Obj.repr(
# 476 "grammar_parser.mly"
      ( { raw_sr_lower = _1;
          raw_sr_upper = _3;
	  raw_sr_homs =  _4  ;
	  raw_sr_loc = mkl() } )
# 1889 "grammar_parser.ml"
               : 'subrule))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'contextrules_body) in
    Obj.repr(
# 483 "grammar_parser.mly"
     ( Raw_item_crs _1 )
# 1896 "grammar_parser.ml"
               : 'contextrules))
; (fun __caml_parser_env ->
    Obj.repr(
# 486 "grammar_parser.mly"
                                     ( [] )
# 1902 "grammar_parser.ml"
               : 'contextrules_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'contextrule) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'contextrules_body) in
    Obj.repr(
# 487 "grammar_parser.mly"
                                     ( _1 :: _2 )
# 1910 "grammar_parser.ml"
               : 'contextrules_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'ident_desc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'ident_desc) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'ident_desc) in
    Obj.repr(
# 491 "grammar_parser.mly"
      ( { raw_cr_ntr = _1;
          raw_cr_target = _3;
          raw_cr_hole = _5;
	  raw_cr_homs = [];
	  raw_cr_loc = mkl() } )
# 1923 "grammar_parser.ml"
               : 'contextrule))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'substitutions_body) in
    Obj.repr(
# 499 "grammar_parser.mly"
     ( Raw_item_sbs _1 )
# 1930 "grammar_parser.ml"
               : 'substitutions))
; (fun __caml_parser_env ->
    Obj.repr(
# 502 "grammar_parser.mly"
                                        ( [] )
# 1936 "grammar_parser.ml"
               : 'substitutions_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'substitution) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'substitutions_body) in
    Obj.repr(
# 503 "grammar_parser.mly"
                                        ( _1 :: _2 )
# 1944 "grammar_parser.ml"
               : 'substitutions_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'substitution_kind) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'ident_desc) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'ident_desc) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'ident_desc) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'homomorphism_list) in
    Obj.repr(
# 507 "grammar_parser.mly"
     ( { raw_sb_name = _5;
         raw_sb_this = _2;
         raw_sb_that = _3;
         raw_sb_multiple = _1;
	 raw_sb_homs =  _6  ;
         raw_sb_loc = mkl() } )
# 1960 "grammar_parser.ml"
               : 'substitution))
; (fun __caml_parser_env ->
    Obj.repr(
# 515 "grammar_parser.mly"
           ( false )
# 1966 "grammar_parser.ml"
               : 'substitution_kind))
; (fun __caml_parser_env ->
    Obj.repr(
# 516 "grammar_parser.mly"
            ( true )
# 1972 "grammar_parser.ml"
               : 'substitution_kind))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'freevars_body) in
    Obj.repr(
# 520 "grammar_parser.mly"
     ( Raw_item_fvs _1 )
# 1979 "grammar_parser.ml"
               : 'freevars))
; (fun __caml_parser_env ->
    Obj.repr(
# 523 "grammar_parser.mly"
                                        ( [] )
# 1985 "grammar_parser.ml"
               : 'freevars_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'freevar) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'freevars_body) in
    Obj.repr(
# 524 "grammar_parser.mly"
                              ( _1 :: _2 )
# 1993 "grammar_parser.ml"
               : 'freevars_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'ident_desc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'ident_desc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'ident_desc) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'homomorphism_list) in
    Obj.repr(
# 528 "grammar_parser.mly"
     ( { raw_fv_name = _4;
         raw_fv_this = _1;
         raw_fv_that = _2;
	 raw_fv_homs = _5  ;
         raw_fv_loc = mkl() } )
# 2007 "grammar_parser.ml"
               : 'freevar))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'embedmorphism_list) in
    Obj.repr(
# 536 "grammar_parser.mly"
     ( Raw_item_embed _1 )
# 2014 "grammar_parser.ml"
               : 'embed))
; (fun __caml_parser_env ->
    Obj.repr(
# 539 "grammar_parser.mly"
          ( LTEQ )
# 2020 "grammar_parser.ml"
               : 'parsing_annotation_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 540 "grammar_parser.mly"
          ( Left )
# 2026 "grammar_parser.ml"
               : 'parsing_annotation_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 541 "grammar_parser.mly"
          ( Right )
# 2032 "grammar_parser.ml"
               : 'parsing_annotation_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 542 "grammar_parser.mly"
          ( Non)
# 2038 "grammar_parser.ml"
               : 'parsing_annotation_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'parsing_annotations_body) in
    Obj.repr(
# 546 "grammar_parser.mly"
      ( Raw_item_pas 
          [ { raw_pa_data = _1 ; 
	    raw_pa_loc = mkl() } ] 
           )
# 2048 "grammar_parser.ml"
               : 'parsing_annotations))
; (fun __caml_parser_env ->
    Obj.repr(
# 552 "grammar_parser.mly"
                                ( [] )
# 2054 "grammar_parser.ml"
               : 'parsing_annotations_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'parsing_annotation) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'parsing_annotations_body) in
    Obj.repr(
# 553 "grammar_parser.mly"
                                                    ( _1 :: _2 )
# 2062 "grammar_parser.ml"
               : 'parsing_annotations_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ident_desc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'parsing_annotation_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ident_desc) in
    Obj.repr(
# 556 "grammar_parser.mly"
                                                     (  (_1,_2,_3) )
# 2071 "grammar_parser.ml"
               : 'parsing_annotation))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string*string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'bindspecall) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'homomorphism_list) in
    Obj.repr(
# 561 "grammar_parser.mly"
        ( {raw_hsi_name=fst _2; raw_hsi_bs=_3; raw_hsi_homs=_4; raw_hsi_loc=mkl() } )
# 2080 "grammar_parser.ml"
               : 'hom_section_item))
; (fun __caml_parser_env ->
    Obj.repr(
# 564 "grammar_parser.mly"
                                              ( [] )
# 2086 "grammar_parser.ml"
               : 'hom_section_item_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'hom_section_item) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'hom_section_item_list) in
    Obj.repr(
# 565 "grammar_parser.mly"
                                              ( _1 :: _2 )
# 2094 "grammar_parser.ml"
               : 'hom_section_item_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string*string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'hom_section_item_list) in
    Obj.repr(
# 569 "grammar_parser.mly"
     ( let raw_hs = { raw_hs_wrapper=(fst _1); raw_hs_hsis=_2; raw_hs_loc=mkl() } in
       Raw_item_hs raw_hs )
# 2103 "grammar_parser.ml"
               : 'hom_section))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string*string) in
    Obj.repr(
# 574 "grammar_parser.mly"
     ( let raw_rqs = { raw_rqs_name=(fst _1); raw_rqs_begin=true; raw_rqs_loc=mkl() } in
       Raw_item_coq_section raw_rqs )
# 2111 "grammar_parser.ml"
               : 'coq_section_begin))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string*string) in
    Obj.repr(
# 579 "grammar_parser.mly"
     ( let raw_rqs = { raw_rqs_name=(fst _1); raw_rqs_begin=false; raw_rqs_loc=mkl() } in
       Raw_item_coq_section raw_rqs )
# 2119 "grammar_parser.ml"
               : 'coq_section_end))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string*string) in
    Obj.repr(
# 584 "grammar_parser.mly"
     ( let raw_rqv = { raw_rqv_name=(fst _1); raw_rqv_loc=mkl() } in
       Raw_item_coq_variable raw_rqv )
# 2127 "grammar_parser.ml"
               : 'coq_variable))
; (fun __caml_parser_env ->
    Obj.repr(
# 590 "grammar_parser.mly"
                                  ( [] )
# 2133 "grammar_parser.ml"
               : Types.embed_spec_el list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'unfiltered_spec_el) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Types.embed_spec_el list) in
    Obj.repr(
# 591 "grammar_parser.mly"
                                                ( _1::_2 )
# 2141 "grammar_parser.ml"
               : Types.embed_spec_el list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'unfiltered_inner) in
    Obj.repr(
# 595 "grammar_parser.mly"
      ( Embed_inner (mkl(),_2) )
# 2148 "grammar_parser.ml"
               : 'unfiltered_spec_el))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string*string) in
    Obj.repr(
# 596 "grammar_parser.mly"
               ( Embed_string (mkl(),fst _1) )
# 2155 "grammar_parser.ml"
               : 'unfiltered_spec_el))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 597 "grammar_parser.mly"
               ( Embed_string (mkl(),_1) )
# 2162 "grammar_parser.ml"
               : 'unfiltered_spec_el))
; (fun __caml_parser_env ->
    Obj.repr(
# 600 "grammar_parser.mly"
                                       ( "" )
# 2168 "grammar_parser.ml"
               : 'unfiltered_inner))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string*string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unfiltered_inner) in
    Obj.repr(
# 601 "grammar_parser.mly"
                                       ( (fst _1) ^ _2 )
# 2176 "grammar_parser.ml"
               : 'unfiltered_inner))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unfiltered_inner) in
    Obj.repr(
# 602 "grammar_parser.mly"
                                       ( _1 ^ _2 )
# 2184 "grammar_parser.ml"
               : 'unfiltered_inner))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry drule_line_annot *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry unfiltered_spec_el_list *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry embed_spec_el_list *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Types.raw_item list)
let drule_line_annot (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Types.raw_drule_line_annot)
let unfiltered_spec_el_list (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 3 lexfun lexbuf : Types.embed_spec_el list)
let embed_spec_el_list (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 4 lexfun lexbuf : Types.embed_spec_el list)
